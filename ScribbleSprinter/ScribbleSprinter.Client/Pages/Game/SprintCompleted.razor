@inject IJSRuntime runtime
<div class="fireworks ease-in" style="position:fixed; width:100%; height:100%; top: 0px; left: 0px; background-color:black; z-index: -1">
</div>
<MudContainer Class="d-flex align-center justify-center mud-width-full" Style="height:100vh;">
    <MudStack Class="align-center">
        <MudText Typo="Typo.h3" Style="color:white">YOU DID IT!!</MudText>
        <MudText Typo="Typo.body1" Style="color:white">Gaze upon your thoughtless creation:</MudText>
        <p style="color:white">@SavedTexts</p>
        <MudStack Row=true>
            <MudButton Color="Color.Primary" OnClick="OnContinue" Variant="Variant.Filled">Continue Typing</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.ContentCopy" OnClick="@(() => runtime.InvokeVoidAsync("navigator.clipboard.writeText", SavedTexts))">Copy to Clipboard</MudButton>
        </MudStack>
    </MudStack>

</MudContainer>
@code {
    [Parameter]
    public EventCallback OnContinue { get; set; }

    [Parameter]
    public string? SavedTexts { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await runtime.InvokeVoidAsync("startFireworks");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
